// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebhookEvent webhook event
//
// swagger:model webhookEvent
type WebhookEvent struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// error
	Error string `json:"error,omitempty"`

	// event
	// Required: true
	// Min Length: 1
	Event *string `json:"event"`

	// id
	// Read Only: true
	// Minimum: 1
	ID int64 `json:"id,omitempty"`

	// payload
	// Required: true
	Payload *string `json:"payload"`

	// status
	// Required: true
	// Enum: ["success","failed","pending"]
	Status *string `json:"status"`

	// webhook ID
	// Minimum: 1
	WebhookID int64 `json:"webhookID,omitempty"`
}

// Validate validates this webhook event
func (m *WebhookEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebhookID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebhookEvent) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WebhookEvent) validateEvent(formats strfmt.Registry) error {

	if err := validate.Required("event", "body", m.Event); err != nil {
		return err
	}

	if err := validate.MinLength("event", "body", *m.Event, 1); err != nil {
		return err
	}

	return nil
}

func (m *WebhookEvent) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinimumInt("id", "body", m.ID, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *WebhookEvent) validatePayload(formats strfmt.Registry) error {

	if err := validate.Required("payload", "body", m.Payload); err != nil {
		return err
	}

	return nil
}

var webhookEventTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success","failed","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webhookEventTypeStatusPropEnum = append(webhookEventTypeStatusPropEnum, v)
	}
}

const (

	// WebhookEventStatusSuccess captures enum value "success"
	WebhookEventStatusSuccess string = "success"

	// WebhookEventStatusFailed captures enum value "failed"
	WebhookEventStatusFailed string = "failed"

	// WebhookEventStatusPending captures enum value "pending"
	WebhookEventStatusPending string = "pending"
)

// prop value enum
func (m *WebhookEvent) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, webhookEventTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WebhookEvent) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *WebhookEvent) validateWebhookID(formats strfmt.Registry) error {
	if swag.IsZero(m.WebhookID) { // not required
		return nil
	}

	if err := validate.MinimumInt("webhookID", "body", m.WebhookID, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this webhook event based on the context it is used
func (m *WebhookEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebhookEvent) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebhookEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebhookEvent) UnmarshalBinary(b []byte) error {
	var res WebhookEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
