// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EvalResult eval result
//
// swagger:model evalResult
type EvalResult struct {

	// eval context
	EvalContext *EvalContext `json:"evalContext,omitempty"`

	// eval debug log
	EvalDebugLog *EvalDebugLog `json:"evalDebugLog,omitempty"`

	// flag ID
	FlagID int64 `json:"flagID,omitempty"`

	// flag key
	FlagKey string `json:"flagKey,omitempty"`

	// flag snapshot ID
	FlagSnapshotID int64 `json:"flagSnapshotID,omitempty"`

	// segment ID
	SegmentID int64 `json:"segmentID,omitempty"`

	// timestamp
	Timestamp string `json:"timestamp,omitempty"`

	// variant attachment
	VariantAttachment interface{} `json:"variantAttachment,omitempty"`

	// variant ID
	VariantID int64 `json:"variantID,omitempty"`

	// variant key
	VariantKey string `json:"variantKey,omitempty"`
}

// Validate validates this eval result
func (m *EvalResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvalContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvalDebugLog(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvalResult) validateEvalContext(formats strfmt.Registry) error {
	if swag.IsZero(m.EvalContext) { // not required
		return nil
	}

	if m.EvalContext != nil {
		if err := m.EvalContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evalContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("evalContext")
			}
			return err
		}
	}

	return nil
}

func (m *EvalResult) validateEvalDebugLog(formats strfmt.Registry) error {
	if swag.IsZero(m.EvalDebugLog) { // not required
		return nil
	}

	if m.EvalDebugLog != nil {
		if err := m.EvalDebugLog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evalDebugLog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("evalDebugLog")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this eval result based on the context it is used
func (m *EvalResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvalContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvalDebugLog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvalResult) contextValidateEvalContext(ctx context.Context, formats strfmt.Registry) error {

	if m.EvalContext != nil {

		if swag.IsZero(m.EvalContext) { // not required
			return nil
		}

		if err := m.EvalContext.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evalContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("evalContext")
			}
			return err
		}
	}

	return nil
}

func (m *EvalResult) contextValidateEvalDebugLog(ctx context.Context, formats strfmt.Registry) error {

	if m.EvalDebugLog != nil {

		if swag.IsZero(m.EvalDebugLog) { // not required
			return nil
		}

		if err := m.EvalDebugLog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evalDebugLog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("evalDebugLog")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EvalResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EvalResult) UnmarshalBinary(b []byte) error {
	var res EvalResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
