// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EvalContext eval context
//
// swagger:model evalContext
type EvalContext struct {

	// enable debug
	EnableDebug bool `json:"enableDebug,omitempty"`

	// entity context
	EntityContext interface{} `json:"entityContext,omitempty"`

	// entityID is used to deterministically at random to evaluate the flag result. If it's empty, flagr will randomly generate one.
	EntityID string `json:"entityID,omitempty"`

	// entity type
	EntityType string `json:"entityType,omitempty"`

	// flagID
	// Minimum: 1
	FlagID int64 `json:"flagID,omitempty"`

	// flagKey. flagID or flagKey will resolve to the same flag. Either works.
	FlagKey string `json:"flagKey,omitempty"`

	// flagTags. flagTags looks up flags by tag. Either works.
	FlagTags []string `json:"flagTags,omitempty"`

	// determine how flagTags is used to filter flags to be evaluated. OR extends the evaluation to those which contains at least one of the provided flagTags or AND limit the evaluation to those which contains all the flagTags.
	// Enum: [ANY ALL]
	FlagTagsOperator *string `json:"flagTagsOperator,omitempty"`
}

// Validate validates this eval context
func (m *EvalContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlagID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlagTagsOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvalContext) validateFlagID(formats strfmt.Registry) error {
	if swag.IsZero(m.FlagID) { // not required
		return nil
	}

	if err := validate.MinimumInt("flagID", "body", m.FlagID, 1, false); err != nil {
		return err
	}

	return nil
}

var evalContextTypeFlagTagsOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ANY","ALL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		evalContextTypeFlagTagsOperatorPropEnum = append(evalContextTypeFlagTagsOperatorPropEnum, v)
	}
}

const (

	// EvalContextFlagTagsOperatorANY captures enum value "ANY"
	EvalContextFlagTagsOperatorANY string = "ANY"

	// EvalContextFlagTagsOperatorALL captures enum value "ALL"
	EvalContextFlagTagsOperatorALL string = "ALL"
)

// prop value enum
func (m *EvalContext) validateFlagTagsOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, evalContextTypeFlagTagsOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EvalContext) validateFlagTagsOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.FlagTagsOperator) { // not required
		return nil
	}

	// value enum
	if err := m.validateFlagTagsOperatorEnum("flagTagsOperator", "body", *m.FlagTagsOperator); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this eval context based on context it is used
func (m *EvalContext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EvalContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EvalContext) UnmarshalBinary(b []byte) error {
	var res EvalContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
