// Code generated by go-swagger; DO NOT EDIT.

package export

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetExportSqliteParams creates a new GetExportSqliteParams object
//
// There are no default values defined in the spec.
func NewGetExportSqliteParams() GetExportSqliteParams {

	return GetExportSqliteParams{}
}

// GetExportSqliteParams contains all the bound params for the get export sqlite operation
// typically these are obtained from a http.Request
//
// swagger:parameters getExportSqlite
type GetExportSqliteParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*export without snapshots data - useful for smaller db without snapshots

	  In: query
	*/
	ExcludeSnapshots *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetExportSqliteParams() beforehand.
func (o *GetExportSqliteParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qExcludeSnapshots, qhkExcludeSnapshots, _ := qs.GetOK("exclude_snapshots")
	if err := o.bindExcludeSnapshots(qExcludeSnapshots, qhkExcludeSnapshots, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindExcludeSnapshots binds and validates parameter ExcludeSnapshots from query.
func (o *GetExportSqliteParams) bindExcludeSnapshots(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("exclude_snapshots", "query", "bool", raw)
	}
	o.ExcludeSnapshots = &value

	return nil
}
