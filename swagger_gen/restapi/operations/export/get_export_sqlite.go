// Code generated by go-swagger; DO NOT EDIT.

package export

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetExportSqliteHandlerFunc turns a function with the right signature into a get export sqlite handler
type GetExportSqliteHandlerFunc func(GetExportSqliteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetExportSqliteHandlerFunc) Handle(params GetExportSqliteParams) middleware.Responder {
	return fn(params)
}

// GetExportSqliteHandler interface for that can handle valid get export sqlite params
type GetExportSqliteHandler interface {
	Handle(GetExportSqliteParams) middleware.Responder
}

// NewGetExportSqlite creates a new http.Handler for the get export sqlite operation
func NewGetExportSqlite(ctx *middleware.Context, handler GetExportSqliteHandler) *GetExportSqlite {
	return &GetExportSqlite{Context: ctx, Handler: handler}
}

/*
	GetExportSqlite swagger:route GET /export/sqlite export getExportSqlite

Export sqlite3 format of the db dump, which is converted from the main database.
*/
type GetExportSqlite struct {
	Context *middleware.Context
	Handler GetExportSqliteHandler
}

func (o *GetExportSqlite) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetExportSqliteParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
