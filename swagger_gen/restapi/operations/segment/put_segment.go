// Code generated by go-swagger; DO NOT EDIT.

package segment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutSegmentHandlerFunc turns a function with the right signature into a put segment handler
type PutSegmentHandlerFunc func(PutSegmentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutSegmentHandlerFunc) Handle(params PutSegmentParams) middleware.Responder {
	return fn(params)
}

// PutSegmentHandler interface for that can handle valid put segment params
type PutSegmentHandler interface {
	Handle(PutSegmentParams) middleware.Responder
}

// NewPutSegment creates a new http.Handler for the put segment operation
func NewPutSegment(ctx *middleware.Context, handler PutSegmentHandler) *PutSegment {
	return &PutSegment{Context: ctx, Handler: handler}
}

/*
	PutSegment swagger:route PUT /flags/{flagID}/segments/{segmentID} segment putSegment

PutSegment put segment API
*/
type PutSegment struct {
	Context *middleware.Context
	Handler PutSegmentHandler
}

func (o *PutSegment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutSegmentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
