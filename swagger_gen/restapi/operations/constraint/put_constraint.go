// Code generated by go-swagger; DO NOT EDIT.

package constraint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutConstraintHandlerFunc turns a function with the right signature into a put constraint handler
type PutConstraintHandlerFunc func(PutConstraintParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutConstraintHandlerFunc) Handle(params PutConstraintParams) middleware.Responder {
	return fn(params)
}

// PutConstraintHandler interface for that can handle valid put constraint params
type PutConstraintHandler interface {
	Handle(PutConstraintParams) middleware.Responder
}

// NewPutConstraint creates a new http.Handler for the put constraint operation
func NewPutConstraint(ctx *middleware.Context, handler PutConstraintHandler) *PutConstraint {
	return &PutConstraint{Context: ctx, Handler: handler}
}

/*
	PutConstraint swagger:route PUT /flags/{flagID}/segments/{segmentID}/constraints/{constraintID} constraint putConstraint

PutConstraint put constraint API
*/
type PutConstraint struct {
	Context *middleware.Context
	Handler PutConstraintHandler
}

func (o *PutConstraint) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutConstraintParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
