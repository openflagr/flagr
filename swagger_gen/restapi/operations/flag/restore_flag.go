// Code generated by go-swagger; DO NOT EDIT.

package flag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RestoreFlagHandlerFunc turns a function with the right signature into a restore flag handler
type RestoreFlagHandlerFunc func(RestoreFlagParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RestoreFlagHandlerFunc) Handle(params RestoreFlagParams) middleware.Responder {
	return fn(params)
}

// RestoreFlagHandler interface for that can handle valid restore flag params
type RestoreFlagHandler interface {
	Handle(RestoreFlagParams) middleware.Responder
}

// NewRestoreFlag creates a new http.Handler for the restore flag operation
func NewRestoreFlag(ctx *middleware.Context, handler RestoreFlagHandler) *RestoreFlag {
	return &RestoreFlag{Context: ctx, Handler: handler}
}

/*
	RestoreFlag swagger:route PUT /flags/{flagID}/restore flag restoreFlag

RestoreFlag restore flag API
*/
type RestoreFlag struct {
	Context *middleware.Context
	Handler RestoreFlagHandler
}

func (o *RestoreFlag) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRestoreFlagParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
