// Code generated by go-swagger; DO NOT EDIT.

package flag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateFlagHandlerFunc turns a function with the right signature into a create flag handler
type CreateFlagHandlerFunc func(CreateFlagParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateFlagHandlerFunc) Handle(params CreateFlagParams) middleware.Responder {
	return fn(params)
}

// CreateFlagHandler interface for that can handle valid create flag params
type CreateFlagHandler interface {
	Handle(CreateFlagParams) middleware.Responder
}

// NewCreateFlag creates a new http.Handler for the create flag operation
func NewCreateFlag(ctx *middleware.Context, handler CreateFlagHandler) *CreateFlag {
	return &CreateFlag{Context: ctx, Handler: handler}
}

/*
	CreateFlag swagger:route POST /flags flag createFlag

CreateFlag create flag API
*/
type CreateFlag struct {
	Context *middleware.Context
	Handler CreateFlagHandler
}

func (o *CreateFlag) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateFlagParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
