// Code generated by go-swagger; DO NOT EDIT.

package flag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FindFlagsHandlerFunc turns a function with the right signature into a find flags handler
type FindFlagsHandlerFunc func(FindFlagsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindFlagsHandlerFunc) Handle(params FindFlagsParams) middleware.Responder {
	return fn(params)
}

// FindFlagsHandler interface for that can handle valid find flags params
type FindFlagsHandler interface {
	Handle(FindFlagsParams) middleware.Responder
}

// NewFindFlags creates a new http.Handler for the find flags operation
func NewFindFlags(ctx *middleware.Context, handler FindFlagsHandler) *FindFlags {
	return &FindFlags{Context: ctx, Handler: handler}
}

/*
	FindFlags swagger:route GET /flags flag findFlags

FindFlags find flags API
*/
type FindFlags struct {
	Context *middleware.Context
	Handler FindFlagsHandler
}

func (o *FindFlags) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFindFlagsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
