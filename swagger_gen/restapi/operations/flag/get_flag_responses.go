// Code generated by go-swagger; DO NOT EDIT.

package flag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openflagr/flagr/swagger_gen/models"
)

// GetFlagOKCode is the HTTP code returned for type GetFlagOK
const GetFlagOKCode int = 200

/*
GetFlagOK returns the flag

swagger:response getFlagOK
*/
type GetFlagOK struct {

	/*
	  In: Body
	*/
	Payload *models.Flag `json:"body,omitempty"`
}

// NewGetFlagOK creates GetFlagOK with default headers values
func NewGetFlagOK() *GetFlagOK {

	return &GetFlagOK{}
}

// WithPayload adds the payload to the get flag o k response
func (o *GetFlagOK) WithPayload(payload *models.Flag) *GetFlagOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get flag o k response
func (o *GetFlagOK) SetPayload(payload *models.Flag) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFlagOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
GetFlagDefault generic error response

swagger:response getFlagDefault
*/
type GetFlagDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetFlagDefault creates GetFlagDefault with default headers values
func NewGetFlagDefault(code int) *GetFlagDefault {
	if code <= 0 {
		code = 500
	}

	return &GetFlagDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get flag default response
func (o *GetFlagDefault) WithStatusCode(code int) *GetFlagDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get flag default response
func (o *GetFlagDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get flag default response
func (o *GetFlagDefault) WithPayload(payload *models.Error) *GetFlagDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get flag default response
func (o *GetFlagDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFlagDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
