// Code generated by go-swagger; DO NOT EDIT.

package variant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateVariantHandlerFunc turns a function with the right signature into a create variant handler
type CreateVariantHandlerFunc func(CreateVariantParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateVariantHandlerFunc) Handle(params CreateVariantParams) middleware.Responder {
	return fn(params)
}

// CreateVariantHandler interface for that can handle valid create variant params
type CreateVariantHandler interface {
	Handle(CreateVariantParams) middleware.Responder
}

// NewCreateVariant creates a new http.Handler for the create variant operation
func NewCreateVariant(ctx *middleware.Context, handler CreateVariantHandler) *CreateVariant {
	return &CreateVariant{Context: ctx, Handler: handler}
}

/*
	CreateVariant swagger:route POST /flags/{flagID}/variants variant createVariant

CreateVariant create variant API
*/
type CreateVariant struct {
	Context *middleware.Context
	Handler CreateVariantHandler
}

func (o *CreateVariant) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateVariantParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
