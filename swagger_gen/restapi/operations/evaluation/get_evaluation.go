// Code generated by go-swagger; DO NOT EDIT.

package evaluation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetEvaluationHandlerFunc turns a function with the right signature into a get evaluation handler
type GetEvaluationHandlerFunc func(GetEvaluationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetEvaluationHandlerFunc) Handle(params GetEvaluationParams) middleware.Responder {
	return fn(params)
}

// GetEvaluationHandler interface for that can handle valid get evaluation params
type GetEvaluationHandler interface {
	Handle(GetEvaluationParams) middleware.Responder
}

// NewGetEvaluation creates a new http.Handler for the get evaluation operation
func NewGetEvaluation(ctx *middleware.Context, handler GetEvaluationHandler) *GetEvaluation {
	return &GetEvaluation{Context: ctx, Handler: handler}
}

/*
	GetEvaluation swagger:route GET /evaluation evaluation getEvaluation

GetEvaluation get evaluation API
*/
type GetEvaluation struct {
	Context *middleware.Context
	Handler GetEvaluationHandler
}

func (o *GetEvaluation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetEvaluationParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
