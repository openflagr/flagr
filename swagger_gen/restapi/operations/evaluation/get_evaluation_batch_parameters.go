// Code generated by go-swagger; DO NOT EDIT.

package evaluation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetEvaluationBatchParams creates a new GetEvaluationBatchParams object
// with the default values initialized.
func NewGetEvaluationBatchParams() GetEvaluationBatchParams {

	var (
		// initialize parameters with default values

		allDefault = bool(false)
		dbgDefault = bool(false)
	)

	return GetEvaluationBatchParams{
		All: &allDefault,

		Dbg: &dbgDefault,
	}
}

// GetEvaluationBatchParams contains all the bound params for the get evaluation batch operation
// typically these are obtained from a http.Request
//
// swagger:parameters getEvaluationBatch
type GetEvaluationBatchParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*whether to use ALL (flagTags) semantics (ANY by default): `?tags=foo,bar&all=true` is equivalent to postEvaluationBatch's `flagTagsOperator: "ALL"`
	  In: query
	  Default: false
	*/
	All *bool
	/*"query optimized" enableDebug parameter
	  In: query
	  Default: false
	*/
	Dbg *bool
	/*JSON encoded "query optimized" evaluation entities: ?entity={"id":"1","type":"a","ctx":{"foo":"bar"}}&entity={"id":"2","ctx":{"baz":42}}
	  Required: true
	  Min Items: 1
	  In: query
	  Collection Format: multi
	*/
	Entity []string
	/*"query optimized" flagIDs parameter
	  Min Items: 1
	  In: query
	  Collection Format: csv
	*/
	Ids []int64
	/*"query optimized" flagKeys parameter
	  Min Items: 1
	  In: query
	  Collection Format: csv
	*/
	Keys []string
	/*"query optimized" flagTags parameter
	  In: query
	  Collection Format: csv
	*/
	Tags []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetEvaluationBatchParams() beforehand.
func (o *GetEvaluationBatchParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAll, qhkAll, _ := qs.GetOK("all")
	if err := o.bindAll(qAll, qhkAll, route.Formats); err != nil {
		res = append(res, err)
	}

	qDbg, qhkDbg, _ := qs.GetOK("dbg")
	if err := o.bindDbg(qDbg, qhkDbg, route.Formats); err != nil {
		res = append(res, err)
	}

	qEntity, qhkEntity, _ := qs.GetOK("entity")
	if err := o.bindEntity(qEntity, qhkEntity, route.Formats); err != nil {
		res = append(res, err)
	}

	qIds, qhkIds, _ := qs.GetOK("ids")
	if err := o.bindIds(qIds, qhkIds, route.Formats); err != nil {
		res = append(res, err)
	}

	qKeys, qhkKeys, _ := qs.GetOK("keys")
	if err := o.bindKeys(qKeys, qhkKeys, route.Formats); err != nil {
		res = append(res, err)
	}

	qTags, qhkTags, _ := qs.GetOK("tags")
	if err := o.bindTags(qTags, qhkTags, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAll binds and validates parameter All from query.
func (o *GetEvaluationBatchParams) bindAll(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetEvaluationBatchParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("all", "query", "bool", raw)
	}
	o.All = &value

	return nil
}

// bindDbg binds and validates parameter Dbg from query.
func (o *GetEvaluationBatchParams) bindDbg(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetEvaluationBatchParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("dbg", "query", "bool", raw)
	}
	o.Dbg = &value

	return nil
}

// bindEntity binds and validates array parameter Entity from query.
//
// Arrays are parsed according to CollectionFormat: "multi" (defaults to "csv" when empty).
func (o *GetEvaluationBatchParams) bindEntity(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("entity", "query", rawData)
	}
	// CollectionFormat: multi
	entityIC := rawData
	if len(entityIC) == 0 {
		return errors.Required("entity", "query", entityIC)
	}

	var entityIR []string
	for _, entityIV := range entityIC {
		entityI := entityIV

		entityIR = append(entityIR, entityI)
	}

	o.Entity = entityIR
	if err := o.validateEntity(formats); err != nil {
		return err
	}

	return nil
}

// validateEntity carries on validations for parameter Entity
func (o *GetEvaluationBatchParams) validateEntity(formats strfmt.Registry) error {

	entitySize := int64(len(o.Entity))

	// minItems: 1
	if err := validate.MinItems("entity", "query", entitySize, 1); err != nil {
		return err
	}
	return nil
}

// bindIds binds and validates array parameter Ids from query.
//
// Arrays are parsed according to CollectionFormat: "csv" (defaults to "csv" when empty).
func (o *GetEvaluationBatchParams) bindIds(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvIds string
	if len(rawData) > 0 {
		qvIds = rawData[len(rawData)-1]
	}

	// CollectionFormat: csv
	idsIC := swag.SplitByFormat(qvIds, "csv")
	if len(idsIC) == 0 {
		return nil
	}

	var idsIR []int64
	for i, idsIV := range idsIC {
		// items.Format: "int64"
		idsI, err := swag.ConvertInt64(idsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "ids", i), "query", "int64", idsI)
		}

		idsIR = append(idsIR, idsI)
	}

	o.Ids = idsIR
	if err := o.validateIds(formats); err != nil {
		return err
	}

	return nil
}

// validateIds carries on validations for parameter Ids
func (o *GetEvaluationBatchParams) validateIds(formats strfmt.Registry) error {

	idsSize := int64(len(o.Ids))

	// minItems: 1
	if err := validate.MinItems("ids", "query", idsSize, 1); err != nil {
		return err
	}
	return nil
}

// bindKeys binds and validates array parameter Keys from query.
//
// Arrays are parsed according to CollectionFormat: "csv" (defaults to "csv" when empty).
func (o *GetEvaluationBatchParams) bindKeys(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvKeys string
	if len(rawData) > 0 {
		qvKeys = rawData[len(rawData)-1]
	}

	// CollectionFormat: csv
	keysIC := swag.SplitByFormat(qvKeys, "csv")
	if len(keysIC) == 0 {
		return nil
	}

	var keysIR []string
	for i, keysIV := range keysIC {
		keysI := keysIV

		if err := validate.MinLength(fmt.Sprintf("%s.%v", "keys", i), "query", keysI, 1); err != nil {
			return err
		}

		keysIR = append(keysIR, keysI)
	}

	o.Keys = keysIR
	if err := o.validateKeys(formats); err != nil {
		return err
	}

	return nil
}

// validateKeys carries on validations for parameter Keys
func (o *GetEvaluationBatchParams) validateKeys(formats strfmt.Registry) error {

	keysSize := int64(len(o.Keys))

	// minItems: 1
	if err := validate.MinItems("keys", "query", keysSize, 1); err != nil {
		return err
	}
	return nil
}

// bindTags binds and validates array parameter Tags from query.
//
// Arrays are parsed according to CollectionFormat: "csv" (defaults to "csv" when empty).
func (o *GetEvaluationBatchParams) bindTags(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvTags string
	if len(rawData) > 0 {
		qvTags = rawData[len(rawData)-1]
	}

	// CollectionFormat: csv
	tagsIC := swag.SplitByFormat(qvTags, "csv")
	if len(tagsIC) == 0 {
		return nil
	}

	var tagsIR []string
	for _, tagsIV := range tagsIC {
		tagsI := tagsIV

		tagsIR = append(tagsIR, tagsI)
	}

	o.Tags = tagsIR

	return nil
}
