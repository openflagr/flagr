// Code generated by go-swagger; DO NOT EDIT.

package evaluation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetEvaluationParams creates a new GetEvaluationParams object
// with the default values initialized.
func NewGetEvaluationParams() GetEvaluationParams {

	var (
		// initialize parameters with default values

		allDefault = bool(false)
		dbgDefault = bool(false)
	)

	return GetEvaluationParams{
		All: &allDefault,

		Dbg: &dbgDefault,
	}
}

// GetEvaluationParams contains all the bound params for the get evaluation operation
// typically these are obtained from a http.Request
//
// swagger:parameters getEvaluation
type GetEvaluationParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*whether to use ALL (flagTags) semantics (ANY by default): `?tags=foo,bar&all=true` is equivalent to postEvaluation's `flagTagsOperator: "ALL"`
	  In: query
	  Default: false
	*/
	All *bool
	/*"query optimized" enableDebug parameter
	  In: query
	  Default: false
	*/
	Dbg *bool
	/*JSON encoded "query optimized" evaluation entity: ?entity={"id":"1","type":"a","ctx":{"foo":"bar"}}
	  Required: true
	  In: query
	*/
	Entity string
	/*"query optimized" flagID parameter
	  In: query
	*/
	ID *int64
	/*"query optimized" flagKey parameter
	  In: query
	*/
	Key *string
	/*"query optimized" flagTags parameter
	  In: query
	  Collection Format: csv
	*/
	Tags []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetEvaluationParams() beforehand.
func (o *GetEvaluationParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAll, qhkAll, _ := qs.GetOK("all")
	if err := o.bindAll(qAll, qhkAll, route.Formats); err != nil {
		res = append(res, err)
	}

	qDbg, qhkDbg, _ := qs.GetOK("dbg")
	if err := o.bindDbg(qDbg, qhkDbg, route.Formats); err != nil {
		res = append(res, err)
	}

	qEntity, qhkEntity, _ := qs.GetOK("entity")
	if err := o.bindEntity(qEntity, qhkEntity, route.Formats); err != nil {
		res = append(res, err)
	}

	qID, qhkID, _ := qs.GetOK("id")
	if err := o.bindID(qID, qhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qKey, qhkKey, _ := qs.GetOK("key")
	if err := o.bindKey(qKey, qhkKey, route.Formats); err != nil {
		res = append(res, err)
	}

	qTags, qhkTags, _ := qs.GetOK("tags")
	if err := o.bindTags(qTags, qhkTags, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAll binds and validates parameter All from query.
func (o *GetEvaluationParams) bindAll(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetEvaluationParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("all", "query", "bool", raw)
	}
	o.All = &value

	return nil
}

// bindDbg binds and validates parameter Dbg from query.
func (o *GetEvaluationParams) bindDbg(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetEvaluationParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("dbg", "query", "bool", raw)
	}
	o.Dbg = &value

	return nil
}

// bindEntity binds and validates parameter Entity from query.
func (o *GetEvaluationParams) bindEntity(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("entity", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("entity", "query", raw); err != nil {
		return err
	}
	o.Entity = raw

	return nil
}

// bindID binds and validates parameter ID from query.
func (o *GetEvaluationParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("id", "query", "int64", raw)
	}
	o.ID = &value

	return nil
}

// bindKey binds and validates parameter Key from query.
func (o *GetEvaluationParams) bindKey(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Key = &raw

	return nil
}

// bindTags binds and validates array parameter Tags from query.
//
// Arrays are parsed according to CollectionFormat: "csv" (defaults to "csv" when empty).
func (o *GetEvaluationParams) bindTags(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvTags string
	if len(rawData) > 0 {
		qvTags = rawData[len(rawData)-1]
	}

	// CollectionFormat: csv
	tagsIC := swag.SplitByFormat(qvTags, "csv")
	if len(tagsIC) == 0 {
		return nil
	}

	var tagsIR []string
	for _, tagsIV := range tagsIC {
		tagsI := tagsIV

		tagsIR = append(tagsIR, tagsI)
	}

	o.Tags = tagsIR

	return nil
}
