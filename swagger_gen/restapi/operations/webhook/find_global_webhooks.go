// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FindGlobalWebhooksHandlerFunc turns a function with the right signature into a find global webhooks handler
type FindGlobalWebhooksHandlerFunc func(FindGlobalWebhooksParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindGlobalWebhooksHandlerFunc) Handle(params FindGlobalWebhooksParams) middleware.Responder {
	return fn(params)
}

// FindGlobalWebhooksHandler interface for that can handle valid find global webhooks params
type FindGlobalWebhooksHandler interface {
	Handle(FindGlobalWebhooksParams) middleware.Responder
}

// NewFindGlobalWebhooks creates a new http.Handler for the find global webhooks operation
func NewFindGlobalWebhooks(ctx *middleware.Context, handler FindGlobalWebhooksHandler) *FindGlobalWebhooks {
	return &FindGlobalWebhooks{Context: ctx, Handler: handler}
}

/*
	FindGlobalWebhooks swagger:route GET /webhooks webhook findGlobalWebhooks

FindGlobalWebhooks find global webhooks API
*/
type FindGlobalWebhooks struct {
	Context *middleware.Context
	Handler FindGlobalWebhooksHandler
}

func (o *FindGlobalWebhooks) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFindGlobalWebhooksParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
