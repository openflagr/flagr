// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateGlobalWebhookHandlerFunc turns a function with the right signature into a create global webhook handler
type CreateGlobalWebhookHandlerFunc func(CreateGlobalWebhookParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateGlobalWebhookHandlerFunc) Handle(params CreateGlobalWebhookParams) middleware.Responder {
	return fn(params)
}

// CreateGlobalWebhookHandler interface for that can handle valid create global webhook params
type CreateGlobalWebhookHandler interface {
	Handle(CreateGlobalWebhookParams) middleware.Responder
}

// NewCreateGlobalWebhook creates a new http.Handler for the create global webhook operation
func NewCreateGlobalWebhook(ctx *middleware.Context, handler CreateGlobalWebhookHandler) *CreateGlobalWebhook {
	return &CreateGlobalWebhook{Context: ctx, Handler: handler}
}

/*
	CreateGlobalWebhook swagger:route POST /webhooks webhook createGlobalWebhook

CreateGlobalWebhook create global webhook API
*/
type CreateGlobalWebhook struct {
	Context *middleware.Context
	Handler CreateGlobalWebhookHandler
}

func (o *CreateGlobalWebhook) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateGlobalWebhookParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
