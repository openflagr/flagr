// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteGlobalWebhookHandlerFunc turns a function with the right signature into a delete global webhook handler
type DeleteGlobalWebhookHandlerFunc func(DeleteGlobalWebhookParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteGlobalWebhookHandlerFunc) Handle(params DeleteGlobalWebhookParams) middleware.Responder {
	return fn(params)
}

// DeleteGlobalWebhookHandler interface for that can handle valid delete global webhook params
type DeleteGlobalWebhookHandler interface {
	Handle(DeleteGlobalWebhookParams) middleware.Responder
}

// NewDeleteGlobalWebhook creates a new http.Handler for the delete global webhook operation
func NewDeleteGlobalWebhook(ctx *middleware.Context, handler DeleteGlobalWebhookHandler) *DeleteGlobalWebhook {
	return &DeleteGlobalWebhook{Context: ctx, Handler: handler}
}

/*
	DeleteGlobalWebhook swagger:route DELETE /webhooks/{webhookID} webhook deleteGlobalWebhook

DeleteGlobalWebhook delete global webhook API
*/
type DeleteGlobalWebhook struct {
	Context *middleware.Context
	Handler DeleteGlobalWebhookHandler
}

func (o *DeleteGlobalWebhook) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteGlobalWebhookParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
